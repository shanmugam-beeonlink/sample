name: CI + CD (ECS)

on:
  push:
    branches:
      - staging
      - production
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_IMAGE: 587054415775.dkr.ecr.us-east-1.amazonaws.com/my-app:latest
  CLUSTER_NAME: fuzzy-panda-t969wx
  SERVICE_NAME: my-app-task-service-fce9fefl

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # -----------------
      # Checkout code
      # -----------------
      - name: Checkout code
        uses: actions/checkout@v3

      # -----------------
      # Setup Node.js
      # -----------------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # -----------------
      # Install dependencies
      # -----------------
      - name: Install dependencies
        run: npm install

      # -----------------
      # Configure AWS credentials
      # -----------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -----------------
      # Login to ECR
      # -----------------
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # -----------------
      # Build & Push Docker image
      # -----------------
      - name: Build and Push Docker image
        run: |
          docker build -t $ECR_IMAGE .
          docker push $ECR_IMAGE

      # -----------------
      # Render ECS Task Definition
      # -----------------
      - name: Render ECS task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-app
          image: $ECR_IMAGE

      # -----------------
      # Deploy to ECS
      # -----------------
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
