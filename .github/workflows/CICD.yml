name: CI + CD (ECS)

on:
  push:
    branches:
      - staging
      - production
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  VPC_ID: ${{ secrets.VPC_ID }}
  ALB_LISTENER_ARN: arn:aws:elasticloadbalancing:us-east-1:587054415775:listener/app/my-app-alb/ddb6503a28d58eeb/a1a67c885a003159
  APP_PORT: ${{ secrets.APP_PORT }}
  STAGING_SERVICE: ${{ secrets.STAGING_SERVICE }}
  PRODUCTION_SERVICE: ${{ secrets.PRODUCTION_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - run: npm install

      - uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build

      - run: npm test

      - uses: actions/upload-artifact@v4
        with:
          name: tested-build
          path: ./

  staging-migrate:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tested-build

      # Uncomment to run staging DB migrations
      # - run: npm run migrate:staging

  production-migrate:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tested-build

      # Uncomment to run production DB migrations
      # - run: npm run migrate:production

  staging-deploy:
    runs-on: ubuntu-latest
    needs: staging-migrate
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
    env:
      DEPLOY_ENV: staging
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          echo "IMAGE=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

      - id: create-tg
        run: |
          TG_NAME=my-app-stg-tg-${GITHUB_SHA::8}
          TG_ARN=$(aws elbv2 create-target-group \
            --name $TG_NAME \
            --protocol HTTP \
            --port $APP_PORT \
            --vpc-id $VPC_ID \
            --target-type ip \
            --health-check-path "/" \
            --query "TargetGroups[0].TargetGroupArn" \
            --output text)
          echo "TG_ARN=$TG_ARN" >> $GITHUB_ENV

      - name: Create Listener Rule
        run: |
          # Generate a unique priority (e.g. 100 + short SHA) to avoid conflict
          PRIORITY=$((100 + 0x${GITHUB_SHA:0:4}))
          aws elbv2 create-rule \
            --listener-arn $ALB_LISTENER_ARN \
            --priority $PRIORITY \
            --conditions Field=path-pattern,Values="/*" \
            --actions Type=forward,TargetGroupArn=$TG_ARN

      - id: render-taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-app
          image: ${{ env.IMAGE }}

      - name: Deploy to Staging ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-taskdef.outputs.task-definition }}
          service: ${{ env.STAGING_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          load-balancers: |
            [
              {
                "targetGroupArn": "${{ env.TG_ARN }}",
                "containerName": "my-app",
                "containerPort": ${{ env.APP_PORT }}
              }
            ]

  production-deploy:
    runs-on: ubuntu-latest
    needs: production-migrate
    if: github.ref == 'refs/heads/production'
    environment:
      name: production
    env:
      DEPLOY_ENV: production
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          echo "IMAGE=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

      - id: create-tg
        run: |
          TG_NAME=my-app-prod-tg-${GITHUB_SHA::8}
          TG_ARN=$(aws elbv2 create-target-group \
            --name $TG_NAME \
            --protocol HTTP \
            --port $APP_PORT \
            --vpc-id $VPC_ID \
            --target-type ip \
            --health-check-path "/" \
            --query "TargetGroups[0].TargetGroupArn" \
            --output text)
          echo "TG_ARN=$TG_ARN" >> $GITHUB_ENV

      - name: Create Listener Rule
        run: |
          PRIORITY=$((200 + 0x${GITHUB_SHA:0:4}))
          aws elbv2 create-rule \
            --listener-arn $ALB_LISTENER_ARN \
            --priority $PRIORITY \
            --conditions Field=path-pattern,Values="/*" \
            --actions Type=forward,TargetGroupArn=$TG_ARN

      - id: render-taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-app
          image: ${{ env.IMAGE }}

      - name: Deploy to Production ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-taskdef.outputs.task-definition }}
          service: ${{ env.PRODUCTION_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          load-balancers: |
            [
              {
                "targetGroupArn": "${{ env.TG_ARN }}",
                "containerName": "my-app",
                "containerPort": ${{ env.APP_PORT }}
              }
            ]
