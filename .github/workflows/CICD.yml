name: CI + CD (ECS)

on:
  push:
    branches:
      - staging
      - production
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: my-app

jobs:
  # -----------------
  # 1. Build
  # -----------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./

  # -----------------
  # 2. Test
  # -----------------
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: Run tests
        run: npm test

      - name: Upload tested artifact
        uses: actions/upload-artifact@v4
        with:
          name: tested-build
          path: ./

  # -----------------
  # 3. Staging migrate
  # -----------------
  staging-migrate:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Download tested artifact
        uses: actions/download-artifact@v4
        with:
          name: tested-build

      - name: Run staging DB migrations
        run: npm run migrate:staging

  # -----------------
  # 4. Production migrate
  # -----------------
  production-migrate:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Download tested artifact
        uses: actions/download-artifact@v4
        with:
          name: tested-build

      - name: Run production DB migrations
        run: npm run migrate:production

  # -----------------
  # 5. Staging deploy
  # -----------------
  staging-deploy:
    runs-on: ubuntu-latest
    needs: staging-migrate
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-app
          image: ${{ env.IMAGE }}

      - name: Deploy to Staging ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: my-app-staging-service
          cluster: my-ecs-cluster
          wait-for-service-stability: true

  # -----------------
  # 6. Production deploy
  # -----------------
  production-deploy:
    runs-on: ubuntu-latest
    needs: production-migrate
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render ECS task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-app
          image: ${{ env.IMAGE }}

      - name: Deploy to Production ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: my-app-prod-service
          cluster: my-ecs-cluster
          wait-for-service-stability: true
